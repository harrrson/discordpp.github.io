(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[71],{593:function(e,n,t){"use strict";t.r(n),t.d(n,{default:function(){return p}});var i=t(159),a=t(219),o=(t(7294),t(3905)),l=["components"],r={};function p(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",null,"Design Principles"),(0,o.kt)("h2",null,"Plugins"),(0,o.kt)("p",null,"Discord++'s plugin system brings two major pros: flexible dependencies and optional addons, both without modifying the core library code."),(0,o.kt)("h3",null,"Mixins"),(0,o.kt)("p",null,"Mixins allow a given function can be overridden multiple times, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"doCall")," is implemented in the REST module but it's also overridden by ",(0,o.kt)("strong",{parentName:"p"},"Plugin: RateLimit")," to stop calls from going out too fast for the API's liking."),(0,o.kt)("p",null,"Mixins play nicely with IntelliSense tools, e.g. ",(0,o.kt)("strong",{parentName:"p"},"Plugin: Endpoints")," can add methods like ",(0,o.kt)("inlineCode",{parentName:"p"},"createMessage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteChannel")," without needing to do something weird like looking up ",(0,o.kt)("inlineCode",{parentName:"p"},"std::function(void*)")),(0,o.kt)("h4",null,"Additional Reading:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://yanniss.github.io/templates.pdf"},(0,o.kt)("em",{parentName:"a"},"Implementing Layered Designs with Mixin Layers")," by Yannis Smaragdakis and Don Batory"))),(0,o.kt)("h3",null,"Submodules"),(0,o.kt)("p",null,"Submodules are used to grab a defined version of plugins but can be a bit clunky. In the future I plan to move to CMake's ",(0,o.kt)("inlineCode",{parentName:"p"},"FetchContent")," or a wrapper of it like ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cpm-cmake/CPM.cmake"},"CPM"),"."),(0,o.kt)("h3",null,"Build-A-Bot"),(0,o.kt)("p",null,"Setting up a project involves adding plugins to two places in ",(0,o.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt"),", two places in ",(0,o.kt)("inlineCode",{parentName:"p"},"include.hh"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"extern.cc"),". As such, I created Build-A-Bot as a handy Bash script to automated the initial process. It makes use of ",(0,o.kt)("inlineCode",{parentName:"p"},"select")," to provide a handy menu system for picking plugins and branches and configures the bot to use them."),(0,o.kt)("h2",null,"Calls"),(0,o.kt)("p",null,"It used to be that to call an API endpoint you called one function with the form of ",(0,o.kt)("inlineCode",{parentName:"p"},'call("GET", "/url/", {payload}, [](){}, [](json){})'),". This wasn't very extensible- it required a ton of definitions for the different numbers of parameters with/without shared pointers, it would've been really difficult to shoehorn in file uploading, and deriving it for endpoint-specific calls would have been incredibly complicated."),(0,o.kt)("h3",null,"Parametric Macro Class Construction"),(0,o.kt)("p",null,"To define a ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," you define the macros ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot")," (The ",(0,o.kt)("inlineCode",{parentName:"p"},"class")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," is inside), ",(0,o.kt)("inlineCode",{parentName:"p"},"Parent")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"BASECALL")," (The parent of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"BASECALL")," if it's the base ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," ",(0,o.kt)("inlineCode",{parentName:"p"},"class"),"), ",(0,o.kt)("inlineCode",{parentName:"p"},"function")," (a list of methods to call in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot")," to create ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," objects), and ",(0,o.kt)("inlineCode",{parentName:"p"},"Fields")," (a list of macros to define the fields of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Call"),"). You then ",(0,o.kt)("inlineCode",{parentName:"p"},'#include "macros/defineCallOpen.hh"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'#include "macros/defineCallClose.hh"')," with any custom method definitions in between. This consumes the parameter macros so that they don't affect any of the following code or you can start again with a new class."),(0,o.kt)("h3",null,"Fluent Parameters"),(0,o.kt)("p",null,"Fluent design was the method I settled on for defining calls to minimize code surface without decreasing usability. the base ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," object now takes a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string")," ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," with conversion from a ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," payload to the ",(0,o.kt)("inlineCode",{parentName:"p"},"std::string")," handled by the derived class ",(0,o.kt)("inlineCode",{parentName:"p"},"JsonCall"),". There's also the new addition of ",(0,o.kt)("inlineCode",{parentName:"p"},"FileCall"),", derived from ",(0,o.kt)("inlineCode",{parentName:"p"},"JsonCall"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"FileCall")," adds the ",(0,o.kt)("inlineCode",{parentName:"p"},"file"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"file_type")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"file_name")," parameters needed to upload a file."),(0,o.kt)("p",null,"The fluent structure of calls also allow for ",(0,o.kt)("strong",{parentName:"p"},"Plugin: Endpoints")," which adds derivations of the 3 basic ",(0,o.kt)("inlineCode",{parentName:"p"},"Call")," classes that cover up the base ",(0,o.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," fields with specific parameters like ",(0,o.kt)("inlineCode",{parentName:"p"},"channel_id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"content"),"."))}p.isMDXComponent=!0},6175:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/design",function(){return t(593)}])},159:function(e,n,t){"use strict";function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return i}})}},function(e){e.O(0,[774,888,179],(function(){return n=6175,e(e.s=n);var n}));var n=e.O();_N_E=n}]);